name: 'Deploy Lambda'
on:
  workflow_call:
    inputs:
      repository:
        description: 'ECR Repository'
        required: true
        type: string
      php-version:
        description: 'PHP Version'
        required: false
        type: string
        default: '8.1'
      stage:
        description: 'Serverless stage'
        required: false
        type: string
        default: 'prod'
    secrets:
      aws-role:
        required: true
      packagist-key:
        required: true
      sentry-auth-token:
        required: true

permissions:
  id-token: write
  contents: write

jobs:
  deploy-lambda:
    runs-on: [ubuntu-latest]
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ inputs.php-version }}
        tools: composer:v2
    - name: Get Composer Cache Directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"
    - name: Cache dependencies
      uses: actions/cache@v1
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
    - run: composer config --auth http-basic.repo.packagist.com token ${{ secrets.packagist-key }}
    - run: composer install --no-dev --optimize-autoloader --ignore-platform-reqs --no-scripts
    - run: sed -i "s@%%RELEASE%%@${GITHUB_SHA}@" config/packages/prod/sentry.yaml
    - name: Create Sentry release
      uses: getsentry/action-release@v1
      env:
        SENTRY_ORG: moovly
        SENTRY_PROJECT: ${{ inputs.repository }}
        SENTRY_AUTH_TOKEN: ${{ secrets.sentry-auth-token }}
      with:
        environment: prod
        finalize: false
    - uses: actions/setup-node@v1
      with:
        node-version: '16.x'
    - run: npm install
    - run: npm install -g serverless
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@master
      with:
        aws-region: eu-west-1
        role-to-assume: ${{ secrets.aws-role }}
        role-duration-seconds: 3600
        role-session-name: CI
    - run: serverless deploy --stage ${{ inputs.stage }} --verbose
