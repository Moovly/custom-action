name: 'Test with codeception'
on:
  workflow_call:
    inputs:
      database-name:
        description: 'Database name'
        required: true
        type: string
      with-doctrine-fixtures:
        description: 'Runs d:f:l'
        required: false
        type: boolean
        default: false
      with-fixtures-staging:
        description: 'Runs fixtures:staging -f'
        required: false
        type: boolean
        default: false
      php-version:
        description: 'PHP Version'
        required: false
        type: string
        default: '8.1'
    secrets:
      aws-role:
        required: true
      packagist-key:
        required: true

permissions:
  contents: write
  id-token: write

jobs:
  tests-codeception:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ inputs.php-version }}
        tools: composer:v2
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@master
      with:
        aws-region: eu-west-1
        role-to-assume: ${{ secrets.aws-role }}
        role-duration-seconds: 3600
        role-session-name: CI
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Get Composer Cache Directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"
    - name: Cache dependencies
      uses: actions/cache@v1
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
    - run: composer config --auth http-basic.repo.packagist.com token ${PACKAGIST_KEY}
      env:
        PACKAGIST_KEY: ${{ secrets.packagist-key }}
    - name: Add AWS credentials to .env.ci
      run: |
        echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> .env.ci
        echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> .env.ci
        echo "AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN" >> .env.ci
    - name: Download Translations
      run: test -d "translations" && curl "https://assets.moovly.com/i18n/backend/{en,nl,fr,es}.json" -o "translations/messages.#1.json" || true
    - run: echo "DATABASE_NAME=${{ inputs.database-name }}-${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    - run: echo "DATABASE_NAME=${DATABASE_NAME:0:55}" >> $GITHUB_ENV
    - name: Install dependencies
      run: |
        sed -i "s@{%DATABASE_NAME%}@${DATABASE_NAME}@" .env.ci
        mkdir -p var/log
        export $(grep -v '^#' .env.ci | xargs)
        composer install --ignore-platform-reqs
    - name: Setup ci environment
      run: |
        docker-compose --f docker-compose-ci.yml build --pull
        docker-compose --f docker-compose-ci.yml up -d
        docker-compose --f docker-compose-ci.yml run --rm nginx ./bin/console d:d:c --if-not-exists
        docker-compose --f docker-compose-ci.yml run --rm nginx ./bin/console d:s:u -f --env=cli
        docker-compose --f docker-compose-ci.yml run --rm nginx ./bin/console c:c --no-warmup --env=dev
        docker-compose --f docker-compose-ci.yml run --rm nginx ./vendor/bin/codecept build
        ${{ inputs.with-fixtures-staging }} && docker-compose --f docker-compose-ci.yml run --rm nginx ./bin/console fixtures:staging -f --env=dev || true
        ${{ inputs.with-doctrine-fixtures }} && docker-compose --f docker-compose-ci.yml run --rm nginx ./bin/console d:f:l --env=dev || true
    - name: Run tests
      run: |
        docker-compose --f docker-compose-ci.yml run --rm nginx ./vendor/bin/codecept run --xml result.xml
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: logs
        path: logs
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: codeceptionOutput
        path: tests/_output
    - name: Cleanup
      if: always()
      run: |
        docker-compose --f docker-compose-ci.yml stop
        docker-compose --f docker-compose-ci.yml rm -f
